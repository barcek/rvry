#!/bin/bash

# rvry v1.24.1
# ©2022 barcek
# License: MIT
# @ github.com
# /barcek/rvry

# Assumes the presence of Bash in '/bin', plus AWK (Gawk),
# cat, command, date, fold, grep, head, pr, sed, tail,
# tput, tr and wc

# Loops, waiting for $beat seconds for use of the $sign key,
# printing one $mark and incrementing $path by 1 each cycle,
# w/ print skipped if --deep and escaping active if --full;
# if either an $edge set to greater than 0 steps is reached
# or either $sign or Ctrl-C is pressed, prints the duration
# w/ any $tag, and if any $log appends all w/ a start stamp;
# then, if any $task, runs, w/ any $word as the full output,
# passing to bash -c by default or exec unquoted if --flux;
# else if --glimpse, prints the flow w/ the current values;
# where --lift, runs any final $task instead for each print

mark=. # characters printed
path=0 # initial step count
beat=1 # secs between steps
edge=0 # if >0, steps taken
sign=q # key pressed to end
word=:RVRY # cue for output

cmds_assumed_present_plus=$(echo $(head -n 11 $0 | tail -n 3)\
  | grep -oP "(?<=plus).*$" | tr -d "#,()" | sed 's/ and / /' | tr "AWKG" "awkg")

# set other default values

msg_jolt_slip="No option for flag"
msg_jolt_void="Absent command"

# define utility functions, general

hint() {
  echo "$@" >&2
}

ease() {
  # manage exit on success
  [ -n "$1" ] && hint "$1"
  tput cnorm # show cursor
  exit 0
}

jolt() {
  # manage exit on failure
  hint "$1"
  tput cnorm # show cursor
  exit 1
}

voids=()

peer() {

  # accrue absent commands
  for cmd in "${@: 2}"; do
    if [[ -z "$(command -v $cmd)" ]]; then
      voids+=($cmd)
    fi
  done

  voids_n=${#voids[@]}

  if (( $voids_n > 0 )); then
    # produce one error for all commands
    case $voids_n in
      1) $1 "${msg_jolt_void} $voids";;
      2) $1 "${msg_jolt_void}s ${voids[0]} and ${voids[1]}";;
      *) $1 "${msg_jolt_void}s $(echo ${voids[@]: 0:${#voids[@]}-1} | sed 's/ /, /g') and ${voids[${#voids[@]}-1]}";;
    esac
  fi
}

# ensure presence of commands

peer jolt $cmds_assumed_present_plus

# define option handlers

know() {
  # extract and print name and version number
  line=$(head -n 3 "$1" | tail -n 1)
  echo "${line: 2:12}"
}

lead() {

  # generate and print help text (title, usage, initial, summary, context)

  # define utility functions, help
  get_fill() {
    echo "" | pr -To $1 | sed 's/ /-/g'
  }

  notes=$(head -n 29 $1 | tail -n 21 | sed 's/$/\\n/')
  width=$(echo -e "$notes" | head -n 1 | wc -c)

  core_info="$(know $1)"
  diff=$((${width} - ${#core_info} - 2))
  indt=$(($diff / 2 - 1))
  rmdr=$(($diff % 2))
  fill_l=$(get_fill $indt)
  fill_r=$(get_fill $(($indt + $rmdr)))

  echo $fill_l "$core_info" $fill_r
  echo "Usage: rvry ["
  echo "  ["
  echo "    --mark/-m <chars> | --path/-p <steps> |"
  echo "    --beat/-b <secs>  | --edge/-e <steps> |"
  echo "    --deep/-d | --full/-f |"
  echo "    --sign/-s <key> |"
  echo "    --word/-w <chars> | --lift/-l | --flux/-x |"
  echo "    --task/-t <cmd: str/src>"
  echo "  ]"
  echo "  [ --glimpse/-g | --near/-N ]"
  echo "  [ TAG [ LOG ] ]"
  echo "    / --version/-v / --help/-h / --test/-T"
  echo "]"
  echo "Initial:"
  echo -e $notes | sed 's/^ //g' | tail -n 7 | head -n 6 | sed 's/^/ /' | sed 's/=/ = /' | sed 's/# /(/' | sed 's/$/)/'
  echo "Summary:"
  echo -e $notes | sed 's/^ //g' | head -n 14 | tail -n 10 | sed 's/#//' | sed 's/\$//g' | sed 's/tag/TAG/' | sed 's/log/LOG/'
  echo "Context:"
  echo -e $notes | sed 's/^ //g' | head -n 3 | sed 's/#//'
}

push() {

  # perform self-test

  count_case=0
  count_pass=0

  # set arguments
  m=">"; m_esc=">\n"; p="4027098"; b="0.01"; e="4027100"; s=" "; w="{}"; tk="echo HEAD {} TAIL"; tg="test"; l="/dev/null"

  # get command outputs
  output_m_g_c="$($0 -g -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_m_g_w="$($0 --glimpse --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_d_g_c="$($0 -g -d -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_d_g_w="$($0 --glimpse --deep --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_f_g_c="$($0 -g -f -m "$m_esc" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_f_g_w="$($0 --glimpse --full --mark "$m_esc" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_l_g_c="$($0 -g -l -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_l_g_w="$($0 --glimpse --lift --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_x_g_c="$($0 -g -x -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_x_g_w="$($0 --glimpse --flux --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"

  output_m_N_c="$($0 -N -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_m_N_w="$($0 --near --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_d_N_c="$($0 -N -d -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_d_N_w="$($0 --near --deep --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_f_N_c="$($0 -N -f -m "$m_esc" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_f_N_w="$($0 --near --full --mark "$m_esc" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"
  output_l_N_c="$($0 -N -l -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_l_N_w="$($0 --near --lift --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"

  output_ld_N_c="$($0 -N -l -d -m "$m" -p "$p" -b "$b" -e "$e" -s "$s" -w "$w" -t "$tk" "$tg" "$l")"
  output_ld_N_w="$($0 --near --lift --deep --mark "$m" --path "$p" --beat "$b" --edge "$e" --sign "$s" --word "$w" --task "$tk" "$tg" "$l")"

  # define utility functions, self-test
  join_on_space() {
    awk '{ s = s $0 } END { print s }'
  }
  is_glimpsed() {
    while read line; do echo "$line" | grep "starting at $p" | grep "$b seconds" | grep "reaches $e" | grep "'$s' or Ctrl-C" | grep "w/ '$w'" | grep "duration w/ '$tg'" | grep "to '$l'" | grep "$1" | grep "$2" | wc -l; done
  }
  is_near() {
    while read line; do echo "$line" | grep "$1\033\[2K\r11:11:11 test echo HEAD " | grep " 11:11:11 test TAIL" | grep "$2" | wc -l; done
  }
  is_near_lift() {
    while read line; do echo "$line" | grep "$1" | grep " \033\[2K\r11:11:11 test" | wc -l; done
  }
  show_newlines() {
    while read line; do echo "$line" | sed 's/$/\\n/g' | tr -d "\n"; done
  }
  run_test_case() {
    ((count_case++))
    if [ "$2" = "$3" ]; then
      hint "✓ PASS: $1" && ((count_pass++))
    else
      hint "✕ FAIL: $1 | expected '$2' to equal '$3'"
    fi
  }

  run_test_case ":mark/g/chars" "$(echo $output_m_g_c | join_on_space | is_glimpsed "prints '$m'" "passing '$tk' to bash -c")" "1"
  run_test_case ":mark/g/words" "$(echo $output_m_g_w | join_on_space | is_glimpsed "prints '$m'" "passing '$tk' to bash -c")" "1"
  run_test_case "+deep/g/chars" "$(echo $output_d_g_c | join_on_space | is_glimpsed "prints nothing" "")" "1"
  run_test_case "+deep/g/words" "$(echo $output_d_g_w | join_on_space | is_glimpsed "prints nothing" "")" "1"
  run_test_case "+full/g/chars" "$(echo $output_f_g_c | join_on_space | is_glimpsed "prints '$m_esc'" "with escaping active")" "1"
  run_test_case "+full/g/words" "$(echo $output_f_g_w | join_on_space | is_glimpsed "prints '$m_esc'" "with escaping active")" "1"
  hint  "---------------------"
  run_test_case "+flux/g/chars" "$(echo $output_x_g_c | join_on_space | is_glimpsed "passing '$tk' to exec unquoted" "")" "1"
  run_test_case "+flux/g/words" "$(echo $output_x_g_w | join_on_space | is_glimpsed "passing '$tk' to exec unquoted" "")" "1"
  hint  "-----------------------"
  run_test_case "+lift/g/chars/+" "$(echo $output_l_g_c | join_on_space | is_glimpsed "passes '$tk' to bash -c" "")" "1"
  run_test_case "+lift/g/chars/-" "$(echo $output_l_g_c | join_on_space | is_glimpsed "passes '$tk' to bash -c" "passing '$tk' to bash -c")" "0"
  run_test_case "+lift/g/words/+" "$(echo $output_l_g_w | join_on_space | is_glimpsed "passes '$tk' to bash -c" "")" "1"
  run_test_case "+lift/g/words/-" "$(echo $output_l_g_w | join_on_space | is_glimpsed "passes '$tk' to bash -c" "passing '$tk' to bash -c")" "0"
  hint  "-----------------------"
  run_test_case ":mark/N/chars"   "$(echo $output_m_N_c | join_on_space | is_near "$m$m" "")" "1"
  run_test_case ":mark/N/words"   "$(echo $output_m_N_c | join_on_space | is_near "$m$m" "")" "1"
  run_test_case "+deep/N/chars/+" "$(echo $output_d_N_c | join_on_space | is_near "" "")" "1"
  run_test_case "+deep/N/chars/-" "$(echo $output_d_N_c | join_on_space | is_near "$m$m" "")" "0"
  run_test_case "+deep/N/words/+" "$(echo $output_d_N_w | join_on_space | is_near "" "")" "1"
  run_test_case "+deep/N/words/-" "$(echo $output_d_N_w | join_on_space | is_near "$m$m" "")" "0"
  run_test_case "+full/N/chars"   "$(echo $output_f_N_c | join_on_space | is_near "$m_esc$m_esc" "")" "1"
  run_test_case "+full/N/words"   "$(echo $output_f_N_w | join_on_space | is_near "$m_esc$m_esc" "")" "1"
  hint  "-----------------------"
  run_test_case "+lift/N/chars" "$(echo $output_l_N_c  | join_on_space | is_near_lift "11:11:11 test TAIL echo HEAD")" "1"
  run_test_case "+lift/N/words" "$(echo $output_l_N_c  | join_on_space | is_near_lift "11:11:11 test TAIL echo HEAD")" "1"
  run_test_case "+l_/d/N/chars" "$(echo $output_ld_N_c | join_on_space | is_near_lift "11:11:11 test TAIL echo HEAD")" "0"
  run_test_case "+l_/d/N/words" "$(echo $output_ld_N_c | join_on_space | is_near_lift "11:11:11 test TAIL echo HEAD")" "0"
  hint  "---------------------------"
  run_test_case "message/jolt/char/1" "$($0 -i             2>&1 | show_newlines)" "$msg_jolt_slip '-i'\n"
  run_test_case "message/jolt/word/1" "$($0 --i__          2>&1 | show_newlines)" "$msg_jolt_slip '--i__'\n"
  run_test_case "message/jolt/both/2" "$($0 --i__ -j       2>&1 | show_newlines)" "$msg_jolt_slip '--i__' or '-j'\n"
  run_test_case "message/jolt/both/3" "$($0 --i__ -j --k__ 2>&1 | show_newlines)" "$msg_jolt_slip '--i__', '-j' or '--k__'\n"
  hint  "---------------------------"
  run_test_case "message/peer/0" "$(peer echo command           | show_newlines)" ""
  run_test_case "message/peer/1" "$(peer echo cmd_1             | show_newlines)" "${msg_jolt_void} cmd_1\n"
  run_test_case "message/peer/2" "$(peer echo cmd_1 cmd_2       | show_newlines)" "${msg_jolt_void}s cmd_1 and cmd_2\n"
  run_test_case "message/peer/3" "$(peer echo cmd_1 cmd_2 cmd_3 | show_newlines)" "${msg_jolt_void}s cmd_1, cmd_2 and cmd_3\n"
  hint  "------------------------"
  run_test_case "info/v/char/full" "$($0 -v        | grep -E "rvry v([0-9]+\.){2}[0-9]+" | wc -l)" "1"
  run_test_case "info/v/word/full" "$($0 --version | grep -E "rvry v([0-9]+\.){2}[0-9]+" | wc -l)" "1"
  hint  "------------------------"
  run_test_case "info/h/char/form" "$($0 -h     | grep -E "(- rvry v|Usage:|Initial:|Summary:|Context:)" | wc -l)" "5"
  run_test_case "info/h/char/ln_c" "$($0 -h     | wc -l)" "36"
  run_test_case "info/h/word/form" "$($0 --help | grep -E "(- rvry v|Usage:|Initial:|Summary:|Context:)" | wc -l)" "5"
  run_test_case "info/h/word/ln_c" "$($0 --help | wc -l)" "36"
  hint  "------------------------"

  result="$count_pass/$count_case"
  [ $count_pass -eq $count_case ] && ease "✓ $result" || jolt "✕ $result"

}

# handle any arguments provided

arg_i=1
slips=()

while (( $arg_i <= ${#} )); do

  case "${@: $arg_i:1}" in

    "--help"|"-h")
      # show help text then exit
      lead $0
      ease
      ;;

    "--version"|"-v")
      # show name and version number then exit
      know $0
      ease
      ;;

    "--test"|"-T")
      # perform self-test then exit
      push
      ease
      ;;

    "--mark"|"-m")
      # set $mark to the value of the next argument
      mark="${@: $arg_i+1:1}"
      ((arg_i++))
      ;;

    "--path"|"-p")
      # set $path to the value of the next argument
      path=${@: $arg_i+1:1}
      ((arg_i++))
      ;;

    "--beat"|"-b")
      # set $beat to the value of the next argument
      beat=${@: $arg_i+1:1}
      ((arg_i++))
      ;;

    "--edge"|"-e")
      # set $edge to the value of the next argument
      edge=${@: $arg_i+1:1}
      ((arg_i++))
      ;;

    "--sign"|"-s")
      # set $sign to the value of the next argument
      sign="${@: $arg_i+1:1}"
      ((arg_i++))
      ;;

    "--deep"|"-d")
      # omit the printing of $mark; cf. function step
      deep=true
      ;;

    "--full"|"-f")
      # allow for escapes in $mark; cf. function step
      full=true
      ;;

    "--word"|"-w")
      # set $word to the value of the next argument
      word="${@: $arg_i+1:1}"
      ((arg_i++))
      ;;

    "--lift"|"-l")
      # runs any task at each step; cf. function step
      lift=true
      ;;

    "--flux"|"-x")
      # runs any task with exec; cf. function call
      flux=true
      ;;

    "--task"|"-t")
      # set $task to the value of the next argument
      # or, if a file path, the content of the file
      if [ -f "${@: $arg_i+1:1}" ]; then
        task=$(cat "${@: $arg_i+1:1}")
      else
        task="${@: $arg_i+1:1}"
      fi
      ((arg_i++))
      ;;

    "--glimpse"|"-g")
      # interrupt to print flow w/ current values
      glimpse=true
      ;;

    "--near"|"-N")
      # omit the escaping of $wipe; cf. function show
      near=true
      ;;

    --*|-*)
      # extend $slips with unavailable flag
      slips+=("'${@: $arg_i:1}'")
      ;;

    *)
      break
      ;;
  esac

  ((arg_i++))
done

slips_n=${#slips[@]}

if (( $slips_n > 0 )); then
  # produce one error for all flags
  case $slips_n in
    1) jolt "$msg_jolt_slip $slips";;
    2) jolt "$msg_jolt_slip ${slips[0]} or ${slips[1]}";;
    *) jolt "$msg_jolt_slip $(echo ${slips[@]: 0:${#slips[@]}-1} | sed 's/ /, /g') or ${slips[${#slips[@]}-1]}";;
  esac
fi

if [ -n "${@: $arg_i:1}" ]; then
  # set $tag to label the final output
  tag=${@: $arg_i:1}
fi

if [ -n "${@: $arg_i+1:1}" ]; then
  # set $log file path and start datetime stamp $dt0
  # to be persisted with duration and $tag;
  # cf. wake process functions
  log=${@: $arg_i+1:1}
  dt0=$(date)
fi

# define interruption functions

warn() {

  # print flow w/ current values

  if [ "1"  =  "$beat" ]; then part_beat="Once a second"; else part_beat="Every $beat seconds"; fi
  if [ -n      "$deep" ]; then part_mark="nothing"; else part_mark="'$mark'"; fi
  if [ -n      "$full" ]; then part_full=" with escaping active"; fi
  if [  0  -lt  $edge  ]; then part_path=" and increments a count starting at $path"; part_edge=" or the count reaches $edge"; fi
  if [ -n      "$task" ]; then used_word=$(echo $task | grep $word); fi
  if [ -n "$used_word" ]; then part_word=", w/ '$word' being the full output"; fi
  if [ -n      "$flux" ]; then part_flux="exec unquoted"; else part_flux="bash -c"; fi
  if [ -n "$tag"  ]; then part_tag=" w/ '$tag'"; fi
  if [ -n "$log"  ]; then part_log=" and appends both w/ a start stamp to '$log'"; fi

  if [ -z "$lift" ] || [ -z "$task" ]; then part_step=" prints ${part_mark}${part_full}"; else part_step=" passes '$task' to ${part_flux}"; fi
  if [ -z "$lift" ] && [ -n "$task" ]; then part_task=", before passing '$task' to ${part_flux}"; fi

  flow="${part_beat}${part_step}${part_path}, until either '${sign}' or Ctrl-C is pressed${part_edge}, then prints the duration${part_tag}${part_log}${part_task}${part_word}"

  echo "$(echo $flow | fold -s -w 65)"
  ease
}

# define primary loop functions

heed() {
  # invoke wake process handler if $sign pressed
  read -t $beat -N 1 char
  if [ "$sign" == "$char" ]; then
    wake
  fi
}

step() {
  # increment $path, applying any $task or $mark,
  # handling also visibility per $full and $near
  ((path++))
  if [ -n "$lift" ] && [ -n "$task" ]; then
    view=$(form)
    from="step"
    call "$dt0 $view" "$from"
  elif [ -z "$deep" ]; then
    if [ -z "$full" ] || [ -n "$near" ]; then
      echo -n "${mark}"
    else
      echo -ne "${mark}"
    fi
  fi
}

pass() {
  # call primary loop functions
  heed
  step
}

# define wake process functions

form() {

  # return duration based on $path and $beat, with $tag if set

  # calculate duration units, allowing for floating point $beat
  secs=$(echo "$path $beat" | awk '{print $1 * $2}')
  h_rm=$(echo "$secs 86400 3600" | awk '{print $1 % $2 / $3}')
  m_rm=$(echo "$secs 3600 60" | awk '{print $1 % $2 / $3}')
  s_rm=$(echo "$secs 60" | awk '{print $1 % $2}')

  view=$(printf "%02.f:%02.f:%02.f" $h_rm $m_rm $s_rm)

  if [ -n "$tag" ]; then
    view+=" ${tag}"
  fi

  echo "${view}"
}

show() {
  # write parameter no. 1 over current line
  wipe="\033[2K\r"
  if [ -n "$near" ]; then
    echo -n "$wipe"
  else
    echo -ne "$wipe"
  fi
  echo "$1"
}

keep() {
  # append parameter no. 1 to $log if set
  if [ -z "$log" ]; then
    return
  fi
  echo "$1" >> "$log"
}

call() {
  # pass the $task set as a command to Bash,
  # each $word replaced by parameter no. 1,
  # handling also visibility per --deep option
  deed=$(echo "$task" | sed "s/$word/$1/g")
  if [ -z "$deep" ] || [ "$2" = "wake" ]; then
    echo "$deed"
  fi
  if [ -z "$flux" ]; then
    bash -c "$deed"
  else
    tput cnorm # show cursor
    exec $deed
  fi
}

wake() {
  # handle wake process then exit
  view=$(form)
  show "$view"
  keep "$dt0 $view"
  if [ -n "$task" ] && [ -z "$lift" ]; then
    from="wake"
    call "$dt0 $view" "$from"
  fi
  ease
}

# initiate

trap "wake" SIGINT

tput civis # hide cursor

if [ -n "$glimpse" ]; then warn; fi

if (( 0 == $edge )); then
  while true; do
    pass
  done
else
  while (( $path < $edge )); do
    pass
  done
  wake
fi
